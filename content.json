{"pages":[],"posts":[{"title":"hexo基础配置","text":"在服务器部署好hexo相关配置后，在本地写文章，然后使用hexo d部署即可 hexo配置 服务器+本地hexo部署：https://www.cnblogs.com/jie-fang/p/13445939.html hexo配置：https://blog.csdn.net/Marvine/article/details/89816846 配置过程中遇到的问题 1.nginx在reload时候报错invalid PID number: https://www.cnblogs.com/tielemao/p/6163419.html 2.nginx -t报错nginx:[error] open() “/run/nginx.pid”：这里使用su - root ，从git切回 nginx命令12345systemctl start nginx.service //启动systemctl status nginx.service //查看状态systemctl stop nginx.service //停止nginx -s reload //重启nginx -t //校验配置 配置评论系统 // disqus和valine两种，但是disqus慢,valine需要身份认证，不开启评论https://blog.csdn.net/sinat_37529938/article/details/111484179https://disqus.com/ 文章、标签、分类 https://blog.csdn.net/qq_32337109/article/details/78755662 插入图片 https://www.jianshu.com/p/f72aaad7b852，这种方式较为繁琐，还会自动生成文件夹，比较麻烦。 我采用的方式是将图片上传到对象存储上面。","link":"/2020/12/23/hexo%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"},{"title":"npm常用命令","text":"查看一个包的版本信息npm view &lt;包名&gt; versions 查看全局安装的包 npm list -g –depth 0","link":"/2020/12/27/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"title":"vscode常用插件和设置","text":"插件 material icon theme 设置 取消目录自动折叠，设置搜索Explorer:Compact Folders，取消","link":"/2020/12/27/vscode%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%92%8C%E8%AE%BE%E7%BD%AE/"},{"title":"安装mysql和mongodb","text":"安装 mysql mongodb 选择 就可以了 命令行启动 mysql 123//进入bin目录mysqld //启动 mysqladmin -u root shutdown //关闭 mongodb 1234567//cmd进入mongodb的bin目录mongod --dbpath E:\\database\\mongodb\\data\\db//cmd进入mongodb的bin目录mongo//关闭mongodb,cmd(管理员)net stop mongo window配置自启动 mysql 配置：https://www.cnblogs.com/xiongzaiqiren/p/8970203.html 常用命令：https://blog.csdn.net/saafdgvsdg/article/details/80465406 12345678910//cmd(管理员)net start mysqlnet stop mysql//cmd(管理员)进入mysql的bin目录.\\mysql -u root -p pwd//退出quit;//修改密码ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'pwd';","link":"/2020/12/27/%E5%AE%89%E8%A3%85mysql%E5%92%8Cmongodb/"},{"title":"webpack打包node_modules依赖兼容ie","text":"问题：使用webpack打包后，部分依赖存在es6语法，导致ie报错白屏。 在解决依赖前，搜了一波解决ie报错的，大多都是基于vue或者react脚手架的配置修改，而且找依赖的方式也是通过不使用某个依赖来排查（比如项目不使用antv g6后，ie就正常了，所以就判断是antv g6这个依赖导致ie报错的）。然而通过上述的依赖排除法后，我将排查出的antv g6使用webpack解析，项目却还是ie报错。好在最后还是解决了问题，并做出如下总结。 找到所有需要编译的依赖包使用es-check-format找到所有需要被打包的依赖。需要被打包的依赖不仅仅是package.json中的依赖，也可能是依赖的依赖。 es-check-format是参考es-check的，由于es-check-format可以根据source-map 进行找到对应的源文件依赖。 loader配置 项目不使用脚手架的配置，举个:chestnut: npm123456include: [ ... path.resolve(__dirname, &quot;node_modules/@antv&quot;), path.resolve(__dirname, &quot;node_modules/@ant-design&quot;), ...] pnpm 由于pnpm是符号链接，实际路径是node_modules/.pnpm/... ，所有解析不到上面的&quot;node_modules/@antv&quot;的路径配置。 方案一：使用正则匹配123456include: (path) =&gt; { if (/\\/@antv/.test(path) || /\\/@ant-design/.test(path)) { return true; } return false;}, 方案二：resolve.symlinks 这个方法的使用我在webpack issue看到的，还没有验证使用过，之后有时间验证下。 webpack官方提供的[symlinks](Resolve | webpack) , 可以解析pnpm的符号链接。所以这儿include不用正则匹配。 123456module.exports = { //... resolve: { symlinks: true, },};","link":"/2022/06/20/webpack%E6%89%93%E5%8C%85node-modules%E4%BE%9D%E8%B5%96%E5%85%BC%E5%AE%B9ie/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"nginx","slug":"nginx","link":"/tags/nginx/"},{"name":"npm","slug":"npm","link":"/tags/npm/"},{"name":"command","slug":"command","link":"/tags/command/"},{"name":"vscode","slug":"vscode","link":"/tags/vscode/"},{"name":"webpack","slug":"webpack","link":"/tags/webpack/"}],"categories":[{"name":"博客","slug":"博客","link":"/categories/%E5%8D%9A%E5%AE%A2/"},{"name":"vscode","slug":"vscode","link":"/categories/vscode/"}]}